# https://aka.ms/yaml

strategy:
  matrix:
    mac-stable:
      imageName: 'macos-latest'
      rustup_toolchain: stable
    mac-beta:
      imageName: 'macos-latest'
      rustup_toolchain: beta
    mac-nightly:
      imageName: 'macos-latest'
      rustup_toolchain: nightly

    linux-stable:
      imageName: 'ubuntu-latest'
      rustup_toolchain: stable
    linux-beta:
      imageName: 'ubuntu-latest'
      rustup_toolchain: beta
    linux-nightly:
      imageName: 'ubuntu-latest'
      rustup_toolchain: nightly

pool:
  vmImage: $(imageName)

steps:
# Need to remove rust-toolchain or we will always use the version specified
# there regardless of what version is installed
# Also need to set the PATH environment variable to include the rust executables
- script: |
    rm rust-toolchain
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    source $HOME/.cargo/env
    rustc --version --verbose
  displayName: install

- script: |
    rustc --version --verbose
    cargo build --verbose --release --all --examples
    cargo test --verbose --release --all --no-run
    cargo build --verbose --release --all --examples --features render_bounding_volumes
    cargo build --verbose --release --all --examples --features flat_scene
    cargo build --verbose --release --all --examples --features kdtree
  displayName: build

- script: |
    cargo test --verbose --release --all
  displayName: test

# Need to limit the number of samples so build doesn't take forever
- script: |
    source ./run-all-examples.sh --verbose
    source ./run-all-examples.sh --verbose --features render_bounding_volumes
    source ./run-all-examples.sh --verbose --features flat_scene
    source ./run-all-examples.sh --verbose --features kdtree
  env: { SAMPLES: "2" }
  displayName: run all examples
